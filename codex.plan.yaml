# codex.plan.yaml — blog-writer v1.1 (Go + Wails)
# Purpose: a machine-readable task DAG for agents to produce an MVP from SPECIFICATION.md

version: 2
spec_file: SPECIFICATION.md

environment:
  go: ">=1.24"
  node: ">=24"
  npm: ">=10"
  wails: "v2"

principles:
  - Offline desktop app (no network calls at runtime)
  - Content over presentation; JSON IR is the source of truth
  - Save = write + commit (autosave = write only)
  - Security first: CSP/local assets only; sanitize SVG aggressively
  - Tests accompany core modules (schema, serde, sanitizer, git)

constraints:
  - TypeScript strict mode in frontend
  - Go code uses modules and CGO enabled for Wails
  - Images must be embedded as data:image/svg+xml;base64,...
  - JSON must validate against the concise tag-based schema

artifacts:
  - build/bin/**            # platform executables from `wails build`
  - src/schema/article.schema.json
  - frontend/dist/**        # React build output

# ------------------------- TASKS -------------------------

tasks:
  - id: scaffold-wails
    name: Project scaffold (Go + Wails + React/TS)
    desc: Initialize Wails app, configure go.mod, wails.json, frontend tooling (Vite, TS, ESLint).
    outputs:
      - go.mod
      - wails.json
      - main.go
      - internal/app/app.go
      - frontend/index.html
      - frontend/src/main.tsx
      - frontend/tsconfig.json
      - package.json
    acceptance:
      - `wails doctor` passes for the target platform
      - `npm run build` succeeds in frontend

  - id: schema-types
    name: JSON Schema + Types (Go & TS)
    desc: Author article.schema.json and generate/handwrite matching TS and Go types; wire Go validator.
    outputs:
      - src/schema/article.schema.json
      - frontend/src/types/article.ts
      - internal/schema/validator.go
    depends_on: [scaffold-wails]
    acceptance:
      - Canonical example validates
      - Invalid samples fail with readable paths

  - id: sanitizer
    name: SVG sanitization & data URI encoding
    desc: Implement allowlist-based SVG sanitizer and Base64 data URI encoder in Go; include adversarial tests.
    outputs:
      - internal/image/sanitize.go
      - internal/image/encode.go
      - internal/image/sanitize_test.go
    acceptance:
      - Removes script/foreignObject/external hrefs
      - Enforces size/node-count limits

  - id: image-pipeline
    name: Image conversion to SVG (stub + hooks)
    desc: Provide a raster→SVG conversion stub with CLI hook points; full vectorization can be TODO.
    outputs:
      - internal/image/convert.go
    depends_on: [sanitizer]
    acceptance:
      - Non-SVG inputs return clear TODO error
      - Native SVG inputs sanitize+embed correctly

  - id: git-layer
    name: Git CLI wrapper (Go)
    desc: Status, stage, commit (with template), amend, pull --rebase, push; init from SSH remote; recent repos.
    outputs:
      - internal/git/git.go
      - internal/git/git_test.go
    depends_on: [scaffold-wails]
    acceptance:
      - Temp-repo tests verify save=commit flow

  - id: repo-service
    name: Repo & Article services (Go)
    desc: RepoService (open/create/recent/settings) and ArticleService (CRUD, ID allocation, validation, autosave).
    outputs:
      - internal/services/repo.go
      - internal/services/article.go
      - internal/services/models.go
      - internal/services/errors.go
    depends_on: [schema-types, git-layer]
    acceptance:
      - ID allocation uses epoch seconds with collision backoff
      - Save(article, commit=true) writes and commits

  - id: bindings
    name: Wails bindings exposure
    desc: Bind RepoService, ArticleService, GitService, ImageService; generate TS bindings under frontend/wailsjs.
    outputs:
      - internal/app/bindings.go
      - frontend/wailsjs/**
    depends_on: [repo-service, image-pipeline]
    acceptance:
      - Frontend can call `window.go.*` methods with correct types

  - id: editor-ui
    name: React editor shell + mapping (IR ⇄ editor state)
    desc: Implement WYSIWYG with h1–h5, p, span, b/i/u, code, br, ol/ul/li, blockquote, pre, hr, img, math.
    outputs:
      - frontend/src/components/Editor.tsx
      - frontend/src/components/Toolbar.tsx
      - frontend/src/lib/serde.ts
      - frontend/src/components/MathBlock.tsx
    depends_on: [bindings, schema-types]
    acceptance:
      - Round-trip JSON fidelity on sample doc (golden test)

  - id: repo-wizard
    name: Startup Repo Wizard UI
    desc: Open existing, open recent, or create-from-SSH; write settings; navigate to editor on success.
    outputs:
      - frontend/src/pages/RepoWizard.tsx
    depends_on: [bindings]
    acceptance:
      - All three flows function; errors surfaced politely

  - id: git-panel
    name: Git panel UI
    desc: Status view, commit box (template), push/pull, diff viewer for JSON.
    outputs:
      - frontend/src/components/GitPanel.tsx
    depends_on: [git-layer, bindings]
    acceptance:
      - Save button writes+commits; autosave writes only

  - id: tests
    name: Test suite wiring (Vitest + Go test)
    desc: Configure CI tests; add golden sample; property tests for serde where feasible.
    outputs:
      - frontend/vitest.config.ts
      - tests/golden.sample.json
      - internal/schema/validator_test.go
    depends_on: [schema-types, editor-ui]
    acceptance:
      - CI runs Go tests and Vitest with all passing

  - id: ci-packaging
    name: GitHub Actions (Go 1.24+ / Node 24+) + Wails build
    desc: Matrix builds for Windows/Linux/macOS (x64/arm64) using Go 1.24+ and Node 24+; upload artifacts; optional release.
    outputs:
      - .github/workflows/ci.yml
      - .github/workflows/release.yml
    depends_on: [scaffold-wails, bindings]
    acceptance:
      - Artifacts uploaded for each OS/arch

parallelization:
  groups:
    - [scaffold-wails]
    - [schema-types, sanitizer]
    - [git-layer, image-pipeline]
    - [repo-service]
    - [bindings]
    - [editor-ui, repo-wizard]
    - [git-panel, tests]
    - [ci-packaging]

definition_of_done:
  - App launches and passes repo wizard
  - Create/edit article; inline+display math preview; image sanitized/embedded (SVG)
  - Autosave writes without commit; Save commits with template
  - JSON validates against schema; round-trip fidelity on golden sample
  - CI produces release artifacts for Win/Linux/macOS on x64/arm64
